#V1.0.0
name: deploy workflow

env:
  STACK_NAME: test
  PREFIX: visor
  SAM_BUCKET: pfg-sia-sam-backend
  REGION: us-east-1
  CF_ROLE: sia-iam-role-github-backend

on:  
  push:
    tags:
      - '*.*.*-pre'
      - '*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: Número de versión para el pre-release a crear. Seguir semantic versioning. Ejemplo 1.1.3
        required: true
        type: string
      ambiente:
        type: choice
        description: 'Ambiente al cual se despliega'
        required: true
        options:
        - develop
        - preprod
        - production

jobs:
  DeployDevelop:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: ${{github.event.inputs.ambiente}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: aws-actions/setup-sam@v0
      # Credenciales de desarrollo
      - if: ${{ github.event.inputs.ambiente == 'develop' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ fromJSON(secrets.VISOR_AWS_CREDS_DEV).access_key_id }}
          aws-secret-access-key: ${{ fromJSON(secrets.VISOR_AWS_CREDS_DEV).secret_access_key }}
          aws-region: ${{ fromJSON(secrets.VISOR_AWS_CREDS_DEV).region }}
      # Credenciales de preproducción
      - if: ${{ github.event.inputs.ambiente == 'preprod' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ fromJSON(secrets.VISOR_AWS_CREDS_PRE).access_key_id }}
          aws-secret-access-key: ${{ fromJSON(secrets.VISOR_AWS_CREDS_PRE).secret_access_key }}
          aws-region: ${{ fromJSON(secrets.VISOR_AWS_CREDS_PRE).region }}
      # Credenciales de producción
      - if: ${{ github.event.inputs.ambiente == 'production' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ fromJSON(secrets.VISOR_AWS_CREDS_PROD).access_key_id }}
          aws-secret-access-key: ${{ fromJSON(secrets.VISOR_AWS_CREDS_PROD).secret_access_key }}
          aws-region: ${{ fromJSON(secrets.VISOR_AWS_CREDS_PROD).region }}
      # Colocar variable de ambiente
      - name: "Colocar variables de ambiente"
        run: |
          # Si la ejecución es manual y el ambiente develop
          if [[ ${{github.event.inputs.ambiente}} == develop]]; then
            # Colocar las siguientes variables
            echo "samEnv=dev" >> $GITHUB_ENV
            echo "roleARN=arn:aws:iam::${{fromJSON(secrets.VISOR_AWS_CREDS_DEV).account_id}}:role/$CF_ROLE" >> $GITHUB_ENV
            echo "kmsARN=${{fromJSON(secrets.VISOR_AWS_CREDS_DEV).kms_arn}}" >> $GITHUB_ENV
          # Si la ejecución es manual y el ambiente es preprod o si se creo un tag de pre-release
          elif [[ ${{github.event.inputs.ambiente}} == preprod || $GITHUB_REF == *.*.*-pre]]; then  
            # Colocar las siguientes variables
            echo "samEnv=pre" >> $GITHUB_ENV
            echo "roleARN=arn:aws:iam::${{fromJSON(secrets.VISOR_AWS_CREDS_PRE).account_id}}:role/$CF_ROLE" >> $GITHUB_ENV
            echo "kmsARN=${{fromJSON(secrets.VISOR_AWS_CREDS_PRE).kms_arn}}" >> $GITHUB_ENV
          # Si la ejecución es manual y el ambiente es production o si se creo un tag de release
          elif [[ ${{github.event.inputs.ambiente}} == production || $GITHUB_REF == *.*.*]]; then
            echo "samEnv=prod" >> $GITHUB_ENV
            echo "roleARN=arn:aws:iam::${{fromJSON(secrets.VISOR_AWS_CREDS_PROD).account_id}}:role/$CF_ROLE" >> $GITHUB_ENV
            echo "kmsARN=${{fromJSON(secrets.VISOR_AWS_CREDS_PROD).kms_arn}}" >> $GITHUB_ENV
          else
            echo "No se pudieron colocar las variables correspondientes"
          fi
      # Crear bucket si no existe
      - name: "Crear bucket si no existe"
        run: aws s3api head-bucket --bucket "$SAM_BUCKET-${{env.samEnv}}" 2>/dev/null || aws s3 mb s3://$SAM_BUCKET-${{env.samEnv}}
      # Construye usando Docker
      - name: "Construir SAM"
        run: sam build --use-container --build-image public.ecr.aws/sam/build-python3.8:1.32.0
      # Aplicar cambios en la aplicación no muestra error si el stack no cambia
      - name: "Deploy SAM"
        run: |
          echo $HASH
          sam deploy \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name "$PREFIX-$STACK_NAME-${{env.samEnv}}" \
          --s3-bucket "$SAM_BUCKET-${{env.samEnv}}" \
          --s3-prefix "$PREFIX-STACK_NAME-${{env.samEnv}}" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --region ${{fromJSON(secrets.VISOR_AWS_CREDS_DEV).region}} \
          --parameter-overrides "EnvName=${{env.samEnv}} KeyKMSARN=${{env.kmsARN}}" \
          --tags "version=$GITHUB_REF"
      #   --role-arn ${{env.roleARN}} 
      - name: "Notificación de error"
        if: ${{ failure() }}
        run: |
          curl -H 'Content-Type: application/json' \
          --retry 4 \
          --retry-delay 1 \
          -d '{"text": "'"$PWD"' - '"$GITHUB_EVENT_NAME"' - ${{job.status}} - '"$GITHUB_REF"' - '"$GITHUB_BASE_REF"' "}' \
          https://mxspsolutions.webhook.office.com/webhookb2/a84b113f-9d27-4138-84ae-e3e4ab4830f2@ac5349df-152e-486f-9b39-fe3c4a25efe0/IncomingWebhook/e2f3db57ac59459a938f44c822548b89/10ed5eda-9b70-4598-858a-e5ae6599fa66
  