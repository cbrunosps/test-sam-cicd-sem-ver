#V1.0.0
name: deploy workflow

env:
  STACK_NAME: test
  PREFIX: visor
  SAM_BUCKET: pfg-sia-sam-backend
  CF_ROLE: sia-iam-role-github-backend
  SAM_CONTAINER: public.ecr.aws/sam/build-python3.8:1.32.0

on:  
  push:
    tags:
      - '*.*.*-pre'
      - '*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: Número de versión para el pre-release a crear. Seguir semantic versioning. Ejemplo 1.1.3
        required: true
        type: string
      ambiente:
        type: choice
        description: 'Ambiente al cual se despliega'
        required: true
        options:
        - develop
        - preprod
        - production

jobs:
  DeployDevelop:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: ${{github.event.inputs.ambiente}}
    steps:
      - name: "Validar número de versión"
        run: |
          echo "Version ${{github.event.inputs.version}}-pre"
          [[ "${{github.event.inputs.version}}" =~ ^([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)-pre$ ]] && echo "Correcto" || exit 1
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.inputs.version}}
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: aws-actions/setup-sam@v0
      # Las credenciales se configuran así y no en la sección de variables de ambiente 
      # para no mostrarlas en los logs.
      # Credenciales de desarrollo
      - if: ${{ github.event.inputs.ambiente == 'develop' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VISOR_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VISOR_DEV_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.VISOR_DEV_REGION }}
      # Credenciales de preproducción
      - if: ${{ github.event.inputs.ambiente == 'preprod' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VISOR_PRE_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VISOR_PRE_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.VISOR_PRE_REGION }}
      # Credenciales de producción
      - if: ${{ github.event.inputs.ambiente == 'production' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VISOR_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VISOR_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.VISOR_PROD_REGION }}
      # Colocar variable de ambiente
      - name: "Colocar variables de ambiente"
        run: |
          # Si la ejecución es manual y el ambiente develop
          if [[ ${{github.event.inputs.ambiente}} = "develop" ]]; then \
          # Colocar las siguientes variables
          echo "samEnv=dev" >> $GITHUB_ENV; \
          echo "roleARN=arn:aws:iam::${{secrets.VISOR_DEV_AWS_ACCOUNT_ID}}:role/$CF_ROLE" >> $GITHUB_ENV;
          echo "kmsARN=${{secrets.VISOR_DEV_AWS_KMS}}" >> $GITHUB_ENV;

          # Si la ejecución es manual y el ambiente es preprod o si se creo un tag de pre-release
          elif [[ ${{github.event.inputs.ambiente}} = "preprod" || $GITHUB_REF = *.*.*-pre ]]; then \  
          # Colocar las siguientes variables
          echo "samEnv=pre" >> $GITHUB_ENV;
          echo "roleARN=arn:aws:iam::${{secrets.VISOR_PRE_AWS_ACCOUNT_ID}}:role/$CF_ROLE" >> $GITHUB_ENV;
          echo "kmsARN=${{secrets.VISOR_PRE_AWS_KMS}}" >> $GITHUB_ENV;
          
          # Si la ejecución es manual y el ambiente es production o si se creo un tag de release
          elif [[ ${{github.event.inputs.ambiente}} = "production" || $GITHUB_REF != "" ]]; then \
          # Colocar las siguientes variables
          echo "samEnv=prod" >> $GITHUB_ENV;
          echo "roleARN=arn:aws:iam::${{secrets.VISOR_PROD_AWS_ACCOUNT_ID}}:role/$CF_ROLE" >> $GITHUB_ENV;
          echo "kmsARN=${{secrets.VISOR_PROD_AWS_ACCOUNT_ID}}" >> $GITHUB_ENV;
      # Crear bucket si no existe
      - name: "Crear bucket si no existe"
        run: aws s3api head-bucket --bucket "$SAM_BUCKET-${{env.samEnv}}" 2>/dev/null || aws s3 mb s3://$SAM_BUCKET-${{env.samEnv}}
      # Construye usando Docker
      - name: "Construir SAM"
        run: sam build --use-container --build-image $SAM_CONTAINER
      # Aplicar cambios en la aplicación no muestra error si el stack no cambia
      - name: "Deploy SAM"
        run: |
          sam deploy \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name "$PREFIX-$STACK_NAME-${{env.samEnv}}" \
          --s3-bucket "$SAM_BUCKET-${{env.samEnv}}" \
          --s3-prefix "$PREFIX-STACK_NAME-${{env.samEnv}}" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides "EnvName=${{env.samEnv}} KeyKMSARN=${{env.kmsARN}}" \
          --tags "version=$GITHUB_REF"
      #   --role-arn ${{env.roleARN}} 
      - name: "Notificación de error"
        if: ${{ failure() }}
        run: |
          curl -H 'Content-Type: application/json' \
          --retry 4 \
          --retry-delay 1 \
          -d '{"text": "'"$PWD"' - '"$GITHUB_EVENT_NAME"' - ${{job.status}} - '"$GITHUB_REF"' - '"$GITHUB_BASE_REF"' "}' \
          https://mxspsolutions.webhook.office.com/webhookb2/a84b113f-9d27-4138-84ae-e3e4ab4830f2@ac5349df-152e-486f-9b39-fe3c4a25efe0/IncomingWebhook/e2f3db57ac59459a938f44c822548b89/10ed5eda-9b70-4598-858a-e5ae6599fa66
  