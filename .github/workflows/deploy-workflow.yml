#V1.0.0
name: deploy-workflow

env: 
  SAM_CONTAINER: public.ecr.aws/sam/build-python3.8:1.32.0
  SAM_BUCKET: test-visor-sam
  CFN_LINT_VERSION: '0.56.4'
  CFN_ROLE: ''

on:
  workflow_call:
    inputs:
      ref:
        description: "Commit o tag a construir y desplegar"
        required: true
        type: string
      ambiente:
        type: string
        description: 'Ambiente al cual se despliega, por ejemplo develop o production'
        required: true

    secrets:
      DEV_AWS_KEY_ID:
        required: false
      DEV_AWS_KEY_SECRET:
        required: false
      DEV_AWS_ACCOUNT_ID:
        required: false
      DEV_AWS_REGION:
        required: false
      DEV_AWS_KMS:
        required: false
      PRE_AWS_KEY_ID:
        required: false
      PRE_AWS_KEY_SECRET:
        required: false
      PRE_AWS_ACCOUNT_ID:
        required: false
      PRE_AWS_REGION:
        required: false
      PRE_AWS_KMS:
        required: false
      PROD_AWS_KEY_ID:
        required: false
      PROD_AWS_KEY_SECRET:
        required: false
      PROD_AWS_ACCOUNT_ID:
        required: false
      PROD_AWS_REGION:
        required: false
      PROD_AWS_KMS:
        required: false
    # La salidas pueden ser usadas por otros jobs del workflow que llame a este
    # workflow reusable 
    outputs:
      project:
        description: "Proyecto al que pertenece el stack. (Se obtiene del archivo pfg-sam.json)"
        value: ${{ jobs.Deploy.outputs.project }}
      stack:
        description: "Nombre del stack. (Se obtiene del archivo pfg-sam.json)"
        value: ${{ jobs.Deploy.outputs.stack }}
jobs:
  Deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: ${{inputs.ambiente}}
    # Salidas de este job
    outputs:
      project: ${{ fromJson(steps.read_json.outputs.pfgSamJSON).project }}
      stack: ${{ fromJSON(steps.read_json.outputs.pfgSamJSON).cfn_stack }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{inputs.ref}}
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: aws-actions/setup-sam@v0
      # Se obtienen propiedades del proyecto
      - name: "Cargando pfg-sam.json"
        id: read_json
        run: |
          content=`cat ./pfg-sam.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=pfgSamJSON::$content"
      # Linter Cloudformation
      - if: ${{ inputs.ambiente == 'develop'}}
        name: "CFN Lint"
        run: |
          pip install cfn-lint==$CFN_LINT_VERSION
          cfn-lint template.yaml
      # Las credenciales se configuran así y no en la sección de variables de ambiente 
      # para no mostrarlas en los logs.
      # Credenciales de desarrollo
      - if: ${{ inputs.ambiente == 'develop'}}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_KEY_SECRET }}
          aws-region: ${{ secrets.DEV_AWS_REGION }}
      # Credenciales de preproducción
      - if: ${{ inputs.ambiente == 'preprod' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRE_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRE_AWS_KEY_SECRET }}
          aws-region: ${{ secrets.PRE_AWS_REGION }}
        # Credenciales de producción
      - if: ${{ inputs.ambiente == 'production' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_KEY_SECRET }}
          aws-region: ${{ secrets.PROD_AWS_REGION }}
      # Colocar variable de ambiente
      # SAM Validate. Según la documentación solo revisa que sea un archivo YAML correcto
      # pero parece que también valida que el usuario tenga permisos en IAM para crear los
      # recursos que vienen en la plantilla, solo se ejecuta si el despliegue no se hace
      # con un rol de CloudFormation y lo hace directamente el usuario dueño de las credenciales
      # configuradas en el paso anterior.
      - if: ${{env.CFN_ROLE == ''}}
        name: "SAM Validate"
        run: |
          sam validate
      # Se obtienen los secretos segun el ambiente.
      - name: "Colocar variables de ambiente"
        run: |
          # Si la ejecución es manual y el ambiente develop
          # Si la ejecución es manual y el ambiente es preprod o si se creo un tag de pre-release
          # Si la ejecución es manual y el ambiente es production o si se creo un tag de release
          if [[ ${{inputs.ambiente}} = "develop" ]]; then \
            echo "samEnv=dev" >> $GITHUB_ENV; \
            echo "roleARN=arn:aws:iam::${{secrets.DEV_AWS_ACCOUNT_ID}}:role/${{env.CFN_ROLE}}" >> $GITHUB_ENV; \
            echo "kmsARN=${{secrets.DEV_AWS_KMS}}" >> $GITHUB_ENV; \
          elif [[ ${{inputs.ambiente}} = "preprod" || $GITHUB_REF = "*-pre" ]]; then \
            echo "samEnv=pre" >> $GITHUB_ENV; \
            echo "roleARN=arn:aws:iam::${{secrets.PRE_AWS_ACCOUNT_ID}}:role/${{env.CFN_ROLE}}" >> $GITHUB_ENV; \
            echo "kmsARN=${{secrets.PRE_AWS_KMS}}" >> $GITHUB_ENV; \        
          elif [[ ${{inputs.ambiente}} = "production" || $GITHUB_REF != "*-pre" ]]; then \
            echo "samEnv=prod" >> $GITHUB_ENV; \
            echo "roleARN=arn:aws:iam::${{secrets.PROD_AWS_ACCOUNT_ID}}:role/${{env.CFN_ROLE}}" >> $GITHUB_ENV; \
            echo "kmsARN=${{secrets.PROD_AWS_KMS}}" >> $GITHUB_ENV; \
          fi
      # Crear bucket si no existe
      - name: "Crear bucket si no existe"
        run: aws s3api head-bucket --bucket "$SAM_BUCKET-${{env.samEnv}}" 2>/dev/null || aws s3 mb s3://$SAM_BUCKET-${{env.samEnv}}
      # Construye usando Docker
      - name: "Construir SAM"
        run: sam build --use-container --build-image $SAM_CONTAINER
      # Aplicar cambios en la aplicación no muestra error si el stack no cambia
      # Si no hay un rol para CloudFormation
      - if: ${{ env.CF_ROLE == ''}}
        name: "Deploy SAM"
        run: |
          sam deploy \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name "${{fromJson(steps.read_json.outputs.pfgSamJSON).project}}-${{fromJson(steps.read_json.outputs.pfgSamJSON).cfn_stack}}-${{env.samEnv}}" \
          --s3-bucket "$SAM_BUCKET-${{env.samEnv}}" \
          --s3-prefix "${{fromJson(steps.read_json.outputs.pfgSamJSON).project}}-STACK_NAME-${{env.samEnv}}" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides "EnvName=${{env.samEnv}} KeyKMSARN=${{env.kmsARN}}" \
          --tags "version=$GITHUB_REF"
      # Si hay un rol para CloudFormation
      - if: ${{ env.CF_ROLE != ''}} 
        name: "Deploy SAM"
        run: |
          sam deploy \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name "${{fromJson(steps.read_json.outputs.pfgSamJSON).project}}-${{fromJSON(steps.read_json.outputs.pfgSamJSON).cfn_stack}}-${{env.samEnv}}" \
          --s3-bucket "$SAM_BUCKET-${{env.samEnv}}" \
          --s3-prefix "${{fromJson(steps.read_json.outputs.pfgSamJSON).project}}-STACK_NAME-${{env.samEnv}}" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides "EnvName=${{env.samEnv}} KeyKMSARN=${{env.kmsARN}}" \
          --tags "version=$GITHUB_REF"
          --role-arn ${{env.roleARN}}
      # Validar drift
      - name: "Validar drift de stack de Cloudformation"
        run: |
          # Se ejecuta AWS para detectar la desviación/drift del stack. Este genera un ID.
          DRIFT=$(aws cloudformation detect-stack-drift --stack-name "${{needs.DevDeploy.outputs.project}}-${{needs.DevDeploy.outputs.stack}}-dev" | jq '.StackDriftDetectionId')
          
          # Se le quitan las comillas dobles a la variable de ambiente.
          DRIFT=$(echo "${DRIFT//'"'}")

          echo "El id de la deteccion del drift es:" $DRIFT
          
          # A veces la detección del drift es larga, por lo cual podemos verificar 
          # el estatus basado en su ID con el comando siguiente:

          DETECTIONSTATUS=$(aws cloudformation describe-stack-drift-detection-status --stack-drift-detection-id ${DRIFT} | jq '.DetectionStatus')
          
          # Se le quitan las comillas dobles a la variable de ambiente DETECTIONSTATUS
          DETECTIONSTATUS=$(echo "${DETECTIONSTATUS//'"'}")
        
          # El siguiente bucle verifica cada 2 segundos el estatus de la detección e imprime el estado actual. 
          # Y no brinca al siguiente paso hasta que tenga un estado de: detección completada.
          while [[ $DETECTIONSTATUS != "DETECTION_COMPLETE" ]]; do sleep 2; echo $DETECTIONSTATUS; \
          DETECTIONSTATUS=$(aws cloudformation describe-stack-drift-detection-status --stack-drift-detection-id ${DRIFT} | jq '.DetectionStatus'); \
          DETECTIONSTATUS=$(echo "${DETECTIONSTATUS//'"'}"); done
          echo $DETECTIONSTATUS
          
          # Se muestra el estado actual del drift del stack 
          DRIFTSTATUS=$(aws cloudformation describe-stack-drift-detection-status --stack-drift-detection-id $DRIFT | jq '.StackDriftStatus')
          DRIFTSTATUS=$(echo "${DRIFTSTATUS//'"'}")
          echo $DRIFTSTATUS

          #Hacemos ejecutable el script de notificacion de la deteccion de desviacion.
          chmod u+x ./notificacion_drift.sh

          #Ejecutamos el script para notificar.
          . ./notificacion_drift.sh
      - name: "Notificación de error"
        if: ${{ failure() }}
        run: |
          curl -H 'Content-Type: application/json' \
          --retry 4 \
          --retry-delay 1 \
          -d '{"text": "'"$PWD"' - '"$GITHUB_EVENT_NAME"' - ${{job.status}} - '"$GITHUB_REF"' - '"$GITHUB_BASE_REF"' "}' \
          https://mxspsolutions.webhook.office.com/webhookb2/a84b113f-9d27-4138-84ae-e3e4ab4830f2@ac5349df-152e-486f-9b39-fe3c4a25efe0/IncomingWebhook/e2f3db57ac59459a938f44c822548b89/10ed5eda-9b70-4598-858a-e5ae6599fa66
  