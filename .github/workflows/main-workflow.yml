#V1.0.0
name: main workflow
on:
  push:
    branches:
      - main
    paths:
      - '!**/.github/workflows/*.yml'  
      - '!**/.github/workflows/*.yaml' 
  workflow_dispatch:

env:
  STACK_NAME: test
  PREFIX: visor
  SAM_BUCKET: test-visor-sam
  CF_ROLE: sia-iam-role-github-backend

jobs:
  ############ PUSH A RAMA MAIN ##############
  # Si se hace push a la rama main:
  DeployDevelop:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: develop
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: aws-actions/setup-sam@v0
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ fromJSON(secrets.VISOR_AWS_CREDS_DEV).access_key_id }}
          aws-secret-access-key: ${{ fromJSON(secrets.VISOR_AWS_CREDS_DEV).secret_access_key }}
          aws-region: ${{ fromJSON(secrets.VISOR_AWS_CREDS_DEV).region }}
      # Colocar variable de ambiente
      - run: echo "samEnv=dev" >> $GITHUB_ENV
      # Crear bucket si no existe
      - name: "Crear bucket si no existe"
        run: aws s3api head-bucket --bucket "$SAM_BUCKET-${{env.samEnv}}" 2>/dev/null || aws s3 mb s3://$SAM_BUCKET-${{env.samEnv}}
      # Obtener nombre de carpeta
      - run: echo "samName=${PWD##*/}" >> $GITHUB_ENV
      # Linter Cloudformation
      - name: "CFN Lint"
        run: |
          pip install cfn-lint
          cfn-lint template.yaml
      # Validar plantilla
      - name: "Validar plantilla"
        run: sam validate

      # Construye usando Docker
      - name: "Construir SAM"
        run: sam build --use-container --build-image public.ecr.aws/sam/build-python3.8:1.32.0

      # Aplicar cambios en la aplicación no muestra error si el stack no cambia
      - name: "Deploy SAM"
        run: |
          HASH=$(git rev-parse --short $GITHUB_SHA)
          echo $HASH
          sam deploy \
          --role-arn arn:aws:iam::${{fromJSON(secrets.VISOR_AWS_CREDS_DEV).account_id}}:role/$CF_ROLE \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name "$PREFIX-$STACK_NAME-${{env.samEnv}}" \
          --s3-bucket "$SAM_BUCKET-${{env.samEnv}}" \
          --s3-prefix "$PREFIX-STACK_NAME-${{env.samEnv}}" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --region ${{fromJSON(secrets.VISOR_AWS_CREDS_DEV).region}} \
          --parameter-overrides "EnvName=${{env.samEnv}} KeyKMSARN=${{fromJSON(secrets.VISOR_AWS_CREDS_DEV).kms_arn}}" \
          --tags "version=${HASH} rama=$GITHUB_REF"

      # Validar drift
      - name: "Validar drift de stack de Cloudformation"
        run: |
          # Se ejecuta AWS para detectar la desviación/drift del stack. Este genera un ID.
          DRIFT=$(aws cloudformation detect-stack-drift --stack-name "$PREFIX-$STACK_NAME-${{env.samEnv}}" | jq '.StackDriftDetectionId')
          
          # Se le quitan las comillas dobles a la variable de ambiente.
          DRIFT=$(echo "${DRIFT//'"'}")

          echo "El id de la deteccion del drift es:" $DRIFT
          
          # A veces la detección del drift es larga, por lo cual podemos verificar 
          # el estatus basado en su ID con el comando siguiente:

          DETECTIONSTATUS=$(aws cloudformation describe-stack-drift-detection-status --stack-drift-detection-id ${DRIFT} | jq '.DetectionStatus')
          
          # Se le quitan las comillas dobles a la variable de ambiente DETECTIONSTATUS
          DETECTIONSTATUS=$(echo "${DETECTIONSTATUS//'"'}")
        
          # El siguiente bucle verifica cada 2 segundos el estatus de la detección e imprime el estado actual. 
          # Y no brinca al siguiente paso hasta que tenga un estado de: detección completada.
          while [[ $DETECTIONSTATUS != "DETECTION_COMPLETE" ]]; do sleep 2; echo $DETECTIONSTATUS; \
          DETECTIONSTATUS=$(aws cloudformation describe-stack-drift-detection-status --stack-drift-detection-id ${DRIFT} | jq '.DetectionStatus'); \
          DETECTIONSTATUS=$(echo "${DETECTIONSTATUS//'"'}"); done
          echo $DETECTIONSTATUS
          
          # Se muestra el estado actual del drift del stack 
          DRIFTSTATUS=$(aws cloudformation describe-stack-drift-detection-status --stack-drift-detection-id $DRIFT | jq '.StackDriftStatus')
          DRIFTSTATUS=$(echo "${DRIFTSTATUS//'"'}")
          echo $DRIFTSTATUS
          
          # Dependiendo del estado de drift actual se imprimen los mensajes correspondientes.
          if [[ $DRIFTSTATUS = "IN_SYNC" ]]; then echo "El stack no tiene DRIFTS"; \
          elif [[ $DRIFTSTATUS = "DRIFTED" ]]; then echo "El stack tiene modificaciones manuales"; \
          elif [[ $DRIFTSTATUS = "NOT_CHECKED" ]]; echo "Aun no esta listo el estatus. Verificar en CloudFormation."; fi
          

      - name: "Notificación de error"
        if: ${{ failure() }}
        run: |
          curl -H 'Content-Type: application/json' \
          --retry 4 \
          --retry-delay 1 \
          -d '{"text": "'"$PWD"' - '"$GITHUB_EVENT_NAME"' - ${{job.status}} - '"$GITHUB_REF"' - '"$GITHUB_BASE_REF"' "}' \
          https://mxspsolutions.webhook.office.com/webhookb2/a84b113f-9d27-4138-84ae-e3e4ab4830f2@ac5349df-152e-486f-9b39-fe3c4a25efe0/IncomingWebhook/e2f3db57ac59459a938f44c822548b89/10ed5eda-9b70-4598-858a-e5ae6599fa66
