#V1.0.0
name: reusable_deploy

on:

  workflow_call:

    inputs:
      ref:
        description: "Commit o tag a construir y desplegar"
        required: true
        type: string
      ambiente:
        type: string
        description: 'Ambiente al cual se despliega, por ejemplo develop o production'
        required: true

    secrets:
      DEV_AWS_KEY_ID:
        required: false
      DEV_AWS_KEY_SECRET:
        required: false
      DEV_AWS_ACCOUNT_ID:
        required: false
      DEV_AWS_REGION:
        required: false
      DEV_AWS_KMS:
        required: false
      PRE_AWS_KEY_ID:
        required: false
      PRE_AWS_KEY_SECRET:
        required: false
      PRE_AWS_ACCOUNT_ID:
        required: false
      PRE_AWS_REGION:
        required: false
      PRE_AWS_KMS:
        required: false
      PROD_AWS_KEY_ID:
        required: false
      PROD_AWS_KEY_SECRET:
        required: false
      PROD_AWS_ACCOUNT_ID:
        required: false
      PROD_AWS_REGION:
        required: false
      PROD_AWS_KMS:
        required: false

    # La salidas pueden ser usadas por otros jobs del workflow que llame a este
    # workflow reusable 
    outputs:
      project:
        description: "Proyecto al que pertenece el stack. (Se obtiene del archivo pfg-sam.json)"
        value: ${{ jobs.Deploy.outputs.project }}
      stack:
        description: "Nombre del stack. (Se obtiene del archivo pfg-sam.json)"
        value: ${{ jobs.Deploy.outputs.stack }}


jobs:

  Deploy:
    
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: ${{inputs.ambiente}}
    
    # Salidas de este job
    outputs:
      project: ${{ fromJson(steps.read_json.outputs.pfgSamJSON).project }}
      stack: ${{ fromJSON(steps.read_json.outputs.pfgSamJSON).cfn_stack }}
    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - uses: aws-actions/setup-sam@v0
        with:
          ref: ${{inputs.ref}}
      
      # Se obtienen propiedades del proyecto
      - name: "Cargando pfg-sam.json de main"
        id: read_json
        run: |
          # turn the detached message off
          # git config --global advice.detachedHead false
          # git checkout ${{inputs.ref}}
          # git checkout main -- pfg-sam.json
          cat pfg-sam.json
          content=`cat ./pfg-sam.json`
          # the following lines are only required for multi line json
          content="${content//'%'/%25}"
          content="${content//$'\n'/%0A}"
          content="${content//$'\r'/%0D}"
          # end of optional handling for multi line json
          echo "::set-output name=pfgSamJSON::$content"
      
      # Linter Cloudformation
      - if: ${{ inputs.ambiente == 'develop'}}
        name: "CFN Lint"
        run: |
          pip install cfn-lint==${{fromJson(steps.read_json.outputs.pfgSamJSON).cfn_lint_version}}
          cfn-lint template.yaml
      
      # Las credenciales se configuran así y no en la sección de variables de ambiente 
      # para no mostrarlas en los logs.
      # Credenciales de desarrollo
      - if: ${{ inputs.ambiente == 'develop'}}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_KEY_SECRET }}
          aws-region: ${{ secrets.DEV_AWS_REGION }}
      
      # Credenciales de preproducción
      - if: ${{ inputs.ambiente == 'preprod' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRE_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRE_AWS_KEY_SECRET }}
          aws-region: ${{ secrets.PRE_AWS_REGION }}
        
      # Credenciales de producción
      - if: ${{ inputs.ambiente == 'production' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_KEY_SECRET }}
          aws-region: ${{ secrets.PROD_AWS_REGION }}
      
      # Colocar variable de ambiente
      # SAM Validate. Según la documentación solo revisa que sea un archivo YAML correcto
      # pero parece que también valida que el usuario tenga permisos en IAM para crear los
      # recursos que vienen en la plantilla, solo se ejecuta si el despliegue no se hace
      # con un rol de CloudFormation y lo hace directamente el usuario dueño de las credenciales
      # configuradas en el paso anterior.
      - if: ${{fromJson(steps.read_json.outputs.pfgSamJSON).cfn_role == ''}}
        name: "SAM Validate"
        run: |
          sam validate
      
      # Se obtienen los secretos segun el ambiente.
      - name: "Colocar variables de ambiente"
        run: |
          if [[ ${{inputs.ambiente}} = "develop" ]]; then \
            echo "samEnv=dev" >> $GITHUB_ENV; \
            echo "roleARN=arn:aws:iam::${{secrets.DEV_AWS_ACCOUNT_ID}}:role/${{fromJson(steps.read_json.outputs.pfgSamJSON).cfn_role}}" >> $GITHUB_ENV; \
            echo "kmsARN=${{secrets.DEV_AWS_KMS}}" >> $GITHUB_ENV; \
            echo ${{secrets.DEV_AWS_REGION }} | sed 's/./& /g'; \
          elif [[ ${{inputs.ambiente}} = "preprod" || $GITHUB_REF = "*-pre" ]]; then \
            echo "samEnv=pre" >> $GITHUB_ENV; \
            echo "roleARN=arn:aws:iam::${{secrets.PRE_AWS_ACCOUNT_ID}}:role/${{fromJson(steps.read_json.outputs.pfgSamJSON).cfn_role}}" >> $GITHUB_ENV; \
            echo "kmsARN=${{secrets.PRE_AWS_KMS}}" >> $GITHUB_ENV; \
            echo ${{secrets.PRE_AWS_REGION }} | sed 's/./& /g'; \
          elif [[ ${{inputs.ambiente}} = "production" || $GITHUB_REF != "*-pre" ]]; then \
            echo "samEnv=prod" >> $GITHUB_ENV; \
            echo "roleARN=arn:aws:iam::${{secrets.PROD_AWS_ACCOUNT_ID}}:role/${{fromJson(steps.read_json.outputs.pfgSamJSON).cfn_role}}" >> $GITHUB_ENV; \
            echo "kmsARN=${{secrets.PROD_AWS_KMS}}" >> $GITHUB_ENV; \
            echo ${{secrets.PROD_AWS_REGION }} | sed 's/./& /g'; \
          fi
      
      - name: "Formar nombre de stack y recortar REF"
        run: |
          echo "fullStackName=${{fromJson(steps.read_json.outputs.pfgSamJSON).project}}-${{fromJson(steps.read_json.outputs.pfgSamJSON).cfn_stack}}-${{env.samEnv}}" >> $GITHUB_ENV;
          
      # Crear bucket si no existe
      - name: "Crear bucket si no existe"
        run: aws s3api head-bucket --bucket "${{fromJson(steps.read_json.outputs.pfgSamJSON).sam_bucket}}-${{env.samEnv}}" 2>/dev/null || aws s3 mb s3://${{fromJson(steps.read_json.outputs.pfgSamJSON).sam_bucket}}-${{env.samEnv}}

      - name: "Instalar herramienta de reintentos"
        run: |
          wget -q https://github.com/joshdk/retry/releases/download/v1.2.0/retry-linux-amd64.tar.gz
          tar -xf retry-linux-amd64.tar.gz
          sudo install retry /usr/bin/retry
      
      # Construye usando Docker
      - name: "Construir SAM"
        run: retry --task-time=5m -max-time 20m -attempts=3 -sleep=5s -jitter=15s sam build --use-container --build-image ${{fromJson(steps.read_json.outputs.pfgSamJSON).sam_container}}
      
      # Aplicar cambios en la aplicación no muestra error si el stack no cambia
      # Si no hay un rol para CloudFormation
      - if: ${{ fromJson(steps.read_json.outputs.pfgSamJSON).cfn_role == ''}}
        name: "Deploy SAM"
        run: |
          STACKREF=(${{ inputs.ref }})
          STACKVER="${STACKREF:0:8}" ; echo "${STACKVER}"
          retry --task-time=12m -max-time 45m -attempts=3 -sleep=30s -jitter=3m \
          sam deploy \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name "${{env.fullStackName}}" \
          --s3-bucket "${{fromJson(steps.read_json.outputs.pfgSamJSON).sam_bucket}}-${{env.samEnv}}" \
          --s3-prefix "${{env.fullStackName}}" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides "EnvName=${{env.samEnv}} KeyKMSARN=${{env.kmsARN}}" \
          --tags "version=${STACKVER}"
      
      # Si hay un rol para CloudFormation
      - if: ${{ fromJson(steps.read_json.outputs.pfgSamJSON).cfn_role != ''}} 
        name: "Deploy SAM"
        run: |
          STACKREF=(${{ inputs.ref }})
          STACKVER="${STACKREF:0:8}" ; echo "${STACKVER}"
          retry --task-time=12m -max-time 45m -attempts=3 -sleep=30s -jitter=3m \
          sam deploy \
          --role-arn ${{env.roleARN}} \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name "${{env.fullStackName}}" \
          --s3-bucket "${{fromJson(steps.read_json.outputs.pfgSamJSON).sam_bucket}}-${{env.samEnv}}" \
          --s3-prefix "${{env.fullStackName}}" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides "EnvName=${{env.samEnv}} KeyKMSARN=${{env.kmsARN}}" \
          --tags "version=${STACKVER}"
      
      # Validar drift
      - if: ${{fromJson(steps.read_json.outputs.pfgSamJSON).cfn_role == ''}}
        name: "Validar drift de stack de Cloudformation"
        timeout-minutes: 3
        run: |

          # Se  ejecuta AWS para detectar la desviación/drift del stack. Este genera un ID.
          DRIFT=$(aws cloudformation detect-stack-drift --stack-name "${{env.fullStackName}}" | jq '.StackDriftDetectionId')
          
          #Hacemos ejecutable el script de la detección de desviación.
          chmod u+x ./drift_detection.sh

          #Se ejecuta script en la misma terminal del contenedor del workflow.
          . ./drift_detection.sh -s "${{env.fullStackName}}"
      
      - name: "Notificación de error"
        if: ${{ failure() }}
        run: |
          curl -H 'Content-Type: application/json' \
          --retry 4 \
          --retry-delay 1 \
          -d '{"text": "'"$PWD"' - '"$GITHUB_EVENT_NAME"' - ${{job.status}} - '"$GITHUB_REF"' - '"$GITHUB_BASE_REF"' "}' \
          https://mxspsolutions.webhook.office.com/webhookb2/a84b113f-9d27-4138-84ae-e3e4ab4830f2@ac5349df-152e-486f-9b39-fe3c4a25efe0/IncomingWebhook/e2f3db57ac59459a938f44c822548b89/10ed5eda-9b70-4598-858a-e5ae6599fa66
  
